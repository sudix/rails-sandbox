version: 2.1

orbs:
  slack: circleci/slack@3.4.2
  aws-ecr: circleci/aws-ecr@6.15.1

executors:
  test-executor:
    docker:
      - image: docker/compose:1.27.4
        environment:
          COMPOSE_YAML: docker/docker-compose-test.yaml

commands:
  command-test:
    steps:
      - run: apk add bash curl
      - checkout
      - setup_remote_docker:
          version: 18.06.0-ce
          docker_layer_caching: false
      - run:
          name: Build image
          command: |
            docker-compose -f $COMPOSE_YAML build --parallel
      - run:
          name: Launch the database
          command: |
            docker-compose -f $COMPOSE_YAML up -d mysql
      - run:
          name: Wait db
          command: |
            docker-compose -f $COMPOSE_YAML run dockerize dockerize -wait tcp://mysql:3306 -timeout 1m
      - run:
          name: Setup database
          command: |
            docker-compose -f $COMPOSE_YAML run --rm -e RAILS_ENV=test app bundle exec rails db:create db:migrate
      - run:
          name: RSpec
          command: |
            docker-compose -f $COMPOSE_YAML run --rm app bundle exec rspec
      - slack/status
  command-deploy:
    steps:
      - aws-ecr/build-and-push-image:
          account-url: AWS_ECR_ACCOUNT_URL
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          checkout: true
          dockerfile: "/docker/app/Dockerfile.production"
          extra-build-args: "--build-arg RAILS_ENV=staging --build-arg RAILS_MASTER_KEY=${RAILS_MASTER_KEY_STAGING}"
          no-output-timeout: 20m
          path: "."
          region: AWS_REGION
          repo: "rails-sandbox-app-staging"
          skip-when-tags-exist: true
          tag: "${CIRCLE_SHA1}"

jobs:
  job-test:
    executor:
      name: test-executor
    steps:
      - command-test
  job-deploy:
    executor:
      name: test-executor
    steps:
      - command-test
      - command-deploy
  #   <<: *test_job
  # deploy-staging:
  #   executor:
  #     name: test-executor
  #   <<: *test_job


workflows:
  test:
    jobs:
      - job-test:
         name: test
         filters:
           branches:
             ignore:
               - push-image
  deploy-staging:
    jobs:
      - job-test:
         name: test
         filters:
           branches:
             only:
               - push-image
      - job-deploy:
          name: deploy
          requires:
            - test
          filters:
            branches:
              only:
                - push-image

  #   jobs:
  #   - test:
  #       filters:
  #         branches:
  #           only: push-image
  #   - deploy-staging:
  #       requires:
  #         - test
  #       filters:
  #         branches:
  #           only: push-image
